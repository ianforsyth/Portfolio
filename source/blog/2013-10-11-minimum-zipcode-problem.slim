---
  title: Minimum Zip Code Problem
  tags: Quinlan, Algorithm, PHP
  date: 2013/10/11
  excerpt: "It's been a while since I've had to do any real formula work in my day to day. Lately there's been a lot of design and front-end tweaking so when I got a chance to roll up my sleeves and white board for a little while, it felt great. I was working on a website scraping project with a coworker but the information we wanted was only available to us in pieces."
---

p It's been a while since I've had to do any real formula work in my day to day. Lately there's been a lot of design and front-end tweaking so when I got a chance to roll up my sleeves and white board for a little while, it felt great. I was working on a website scraping project with a coworker but the information we wanted was only available to us in pieces. We could query the database by zip code and get all the results within a 100 mile radius. We wanted results for the entire country. The root of our problem is there are over 40,000 zip codes in the contiguous United States and we didn't want to keep pounding this innocent website with requests. We needed a way to minimize our presence.

p So, we needed a list of zip codes such that if each zip code's longitude/latitude center served as the center of a 100 mile radius circle, those circles would cover the contiguous United States (with acceptable error). I figured someone had already done this or had a script to calculate it so I took to Google. I was very excited by a <a href="http://www.quora.com/Geolocation/What-is-the-minimum-set-of-zip-codes-based-on-a-radius-of-100-miles-that-I-can-use-in-a-series-of-searches-to-cover-the-entire-USA">Quora question</a> that was asking for exactly what I needed.

p.post-blockquote Geolocation: What is the minimum set of zip codes based on a radius of 100 miles that I can use in a series of searches to cover the entire USA? I am doing a series of searches that requires I get all of the data within the USA. I want a small set of zip codes I can use with a 100 mile radius for each that will effectively cover the USA. I'd also like the same for 500, 750, and 1000 miles radius. It is OK to cover Canada and Mexico with part of the circles.

p Of course, the only comment is just scolding the op for asking the question and making an unhelpful suggestion. The time-line on this project was pretty tight and I didn't have a whole lot of time to come up with an elegant solution but I figured the little time I spent trying to figure this out would pay off in the eventual scrape. So off to the white board I went, my scribblings aren't pretty and I think things changed a few times before the final product but here's just an example of how I work through problems.

img src="/src/img/blog-img/zip-code-algorithm.jpg" alt="Zip Code Algorithm"

p.post-caption Some white boarding scribbles, not my best or most impressive. Yes I know radii are for circles, I just used squares.

p The flow of the algorithm is pretty easy to follow and I've included it coded as PHP script below. You take the list all zip codes (I wrote a query to our zip code database that eliminated any Hawaii and Alaska zips). You should have a function that calculates the distance in miles between two latitude/longitude coordinates.

ul
  li Start looping through the list, index i = 0.
  li Find the distance between the i-th zip code in the list and all zip codes that follow it in the list.
  li Remove any zip codes that are within 200 (radius x 2) miles.
  li Re-index the array.
  li Increase i.
  li If index equals list length....end, else....start the loop again.

p Note: We check within 200 miles to eliminate points that could potentially overlap a certain zip code. The script doesn't take too long to complete and runs in O(n^2). It might not be the most efficient or error-proof method but it worked for our purposes. It returned about 100 unique zip codes. Those numbers check out considering the area of CONUS is 3,119,884.69 square miles (<a href="http://en.wikipedia.org/wiki/Contiguous_United_States">ref.</a>) and the area covered by 100 circles with a radius of 100 miles is 3,141,592.65 square miles. So we decided we would use this smaller subset to run our scraper.

pre.post-codeblock
  | // $zips is an array of all the zip codes you want to use in the algorithm
    echo count($zips) . "\n";

    // Looping through all the zips
    for($i = 0; $i < count($zips); $i++){

        // Store this because unsetting values will change the count in the inner loop
        $the_count = count($zips);

        for($j= $i +1; $j < $the_count; $j++) {
            // Caclulate the distance bewteen two zip codes
            $distance = distance($zips[$i]['latitude'], $zips[$i]['longitude'], $zips[$j]['latitude'], $zips[$j]['longitude']);

            // Drop it from the list if it overlaps
            if($distance < 200)
                unset($zips[$j]);
        }
        // Re-index the array
        $zips = array_values($zips);

        // Debug output
        echo $i . ": " . count($zips) . "\n";
    }

    // See your final list and manipulate accordingly
    print_r($zips);

    function distance($lat1, $lon1, $lat2, $lon2) {
        $theta = $lon1 - $lon2;
        $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
        $dist = acos($dist);
        $dist = rad2deg($dist);
        $miles = $dist * 60 * 1.1515;

        return $miles;
    }

p I'd like to eventually go back and work on this more, it was a fun little script to work through. I'm sure there is a more efficient way to get it done that produces less error but for our needs, this served its purpose. If you have a better solution, get in touch and I'll post it here for everyone. Until then, feel free to use mine.


